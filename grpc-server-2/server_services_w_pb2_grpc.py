# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import server_services_w_pb2 as server__services__w__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_services_w_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WeatherServiceStub(object):
    """Service to handle weather-related queries.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetWeatherByRegion = channel.unary_unary(
                '/weather.WeatherService/GetWeatherByRegion',
                request_serializer=server__services__w__pb2.GetWeatherByRegionRequest.SerializeToString,
                response_deserializer=server__services__w__pb2.GetWeatherByRegionResponse.FromString,
                _registered_method=True)
        self.GetWeatherByLocation = channel.unary_unary(
                '/weather.WeatherService/GetWeatherByLocation',
                request_serializer=server__services__w__pb2.GetWeatherByLocationRequest.SerializeToString,
                response_deserializer=server__services__w__pb2.GetWeatherByLocationResponse.FromString,
                _registered_method=True)
        self.GetWeatherByDateRange = channel.unary_unary(
                '/weather.WeatherService/GetWeatherByDateRange',
                request_serializer=server__services__w__pb2.GetWeatherByDateRangeRequest.SerializeToString,
                response_deserializer=server__services__w__pb2.GetWeatherByDateRangeResponse.FromString,
                _registered_method=True)


class WeatherServiceServicer(object):
    """Service to handle weather-related queries.
    """

    def GetWeatherByRegion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherByDateRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WeatherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetWeatherByRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWeatherByRegion,
                    request_deserializer=server__services__w__pb2.GetWeatherByRegionRequest.FromString,
                    response_serializer=server__services__w__pb2.GetWeatherByRegionResponse.SerializeToString,
            ),
            'GetWeatherByLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWeatherByLocation,
                    request_deserializer=server__services__w__pb2.GetWeatherByLocationRequest.FromString,
                    response_serializer=server__services__w__pb2.GetWeatherByLocationResponse.SerializeToString,
            ),
            'GetWeatherByDateRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWeatherByDateRange,
                    request_deserializer=server__services__w__pb2.GetWeatherByDateRangeRequest.FromString,
                    response_serializer=server__services__w__pb2.GetWeatherByDateRangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'weather.WeatherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('weather.WeatherService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WeatherService(object):
    """Service to handle weather-related queries.
    """

    @staticmethod
    def GetWeatherByRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.WeatherService/GetWeatherByRegion',
            server__services__w__pb2.GetWeatherByRegionRequest.SerializeToString,
            server__services__w__pb2.GetWeatherByRegionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWeatherByLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.WeatherService/GetWeatherByLocation',
            server__services__w__pb2.GetWeatherByLocationRequest.SerializeToString,
            server__services__w__pb2.GetWeatherByLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWeatherByDateRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.WeatherService/GetWeatherByDateRange',
            server__services__w__pb2.GetWeatherByDateRangeRequest.SerializeToString,
            server__services__w__pb2.GetWeatherByDateRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SendFileServiceStub(object):
    """Service definition for file sending operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFile = channel.unary_unary(
                '/weather.SendFileService/SendFile',
                request_serializer=server__services__w__pb2.SendFileRequestBody.SerializeToString,
                response_deserializer=server__services__w__pb2.SendFileResponseBody.FromString,
                _registered_method=True)
        self.SendFileChunks = channel.stream_unary(
                '/weather.SendFileService/SendFileChunks',
                request_serializer=server__services__w__pb2.SendFileChunksRequest.SerializeToString,
                response_deserializer=server__services__w__pb2.SendFileChunksResponse.FromString,
                _registered_method=True)


class SendFileServiceServicer(object):
    """Service definition for file sending operations.
    """

    def SendFile(self, request, context):
        """Unary RPC to send a file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFileChunks(self, request_iterator, context):
        """Streaming RPC to send file chunks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SendFileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=server__services__w__pb2.SendFileRequestBody.FromString,
                    response_serializer=server__services__w__pb2.SendFileResponseBody.SerializeToString,
            ),
            'SendFileChunks': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFileChunks,
                    request_deserializer=server__services__w__pb2.SendFileChunksRequest.FromString,
                    response_serializer=server__services__w__pb2.SendFileChunksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'weather.SendFileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('weather.SendFileService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SendFileService(object):
    """Service definition for file sending operations.
    """

    @staticmethod
    def SendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.SendFileService/SendFile',
            server__services__w__pb2.SendFileRequestBody.SerializeToString,
            server__services__w__pb2.SendFileResponseBody.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFileChunks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/weather.SendFileService/SendFileChunks',
            server__services__w__pb2.SendFileChunksRequest.SerializeToString,
            server__services__w__pb2.SendFileChunksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
